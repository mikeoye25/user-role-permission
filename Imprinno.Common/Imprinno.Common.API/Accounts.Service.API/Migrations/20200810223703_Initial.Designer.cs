// <auto-generated />
using System;
using Imprinno.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Accounts.Service.API.Migrations
{
    [DbContext(typeof(EntitiesDbContext))]
    [Migration("20200810223703_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Imprinno.Models.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnName("body")
                        .HasColumnType("character varying(8192)")
                        .HasMaxLength(8192);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("From")
                        .HasColumnName("from")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<int>("MessageType")
                        .HasColumnName("messagetype")
                        .HasColumnType("integer");

                    b.Property<string>("SenderName")
                        .HasColumnName("sendername")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<bool?>("Status")
                        .HasColumnName("status")
                        .HasColumnType("boolean");

                    b.Property<string>("Subject")
                        .HasColumnName("subject")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnName("to")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("updatedon")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("messages","mess");
                });

            modelBuilder.Entity("Imprinno.Models.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("Permissions")
                        .HasColumnName("permissions")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("updatedon")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("roles","acc");
                });

            modelBuilder.Entity("Imprinno.Models.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("AboutMe")
                        .HasColumnName("aboutme")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasColumnName("address")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("createdon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DOB")
                        .HasColumnName("dob")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<bool?>("EmailVerified")
                        .HasColumnName("emailverified")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("firstname")
                        .HasColumnType("character varying(512)")
                        .HasMaxLength(512);

                    b.Property<bool?>("IsDeleted")
                        .HasColumnName("isdeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsDisabled")
                        .HasColumnName("isdisabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .HasColumnName("language")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("lastname")
                        .HasColumnType("character varying(512)")
                        .HasMaxLength(512);

                    b.Property<DateTimeOffset?>("LastSeen")
                        .HasColumnName("lastseen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnName("passwordhash")
                        .HasColumnType("text");

                    b.Property<string>("PasswordSalt")
                        .HasColumnName("passwordsalt")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnName("phone")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<bool?>("PhoneVerified")
                        .HasColumnName("phoneverified")
                        .HasColumnType("boolean");

                    b.Property<string>("ProfileImageURL")
                        .HasColumnName("profileimageurl")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("RegistrationIP")
                        .HasColumnName("registrationip")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<Guid?>("RoleId")
                        .HasColumnName("roleid")
                        .HasColumnType("uuid");

                    b.Property<string>("Sex")
                        .HasColumnName("sex")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("updatedon")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnName("username")
                        .HasColumnType("character varying(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("users","acc");
                });

            modelBuilder.Entity("Imprinno.Models.Entities.User", b =>
                {
                    b.HasOne("Imprinno.Models.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
